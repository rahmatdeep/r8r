// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  workflows   Workflow[]
  Credentials Credentials[]
}

model Workflow {
  id           String        @id @default(uuid())
  title        String
  trigger      Trigger?
  action       Action[]
  workflowRuns WorkflowRun[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
}

model Trigger {
  id                  String            @id @default(uuid())
  availableTriggersId String
  type                AvailableTriggers @relation(fields: [availableTriggersId], references: [id], onDelete: Cascade)
  workflowId          String            @unique
  workflow            Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  metadata            Json              @default("{}")
}

model AvailableTriggers {
  id      String    @id @default(uuid())
  name    String
  Trigger Trigger[]
  image   String
}

model Action {
  id                 String           @id @default(uuid())
  workflowId         String
  workflow           Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  availableActionsId String
  type               AvailableActions @relation(fields: [availableActionsId], references: [id], onDelete: Cascade)
  sortingOrder       Int              @default(0)
  metadata           Json             @default("{}")
}

model AvailableActions {
  id      String   @id @default(uuid())
  name    String
  actions Action[]
  image   String
}

model WorkflowRun {
  id                String             @id @default(uuid())
  workflowId        String
  metaData          Json               @default("{}")
  workflow          Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowRunOutBox WorkflowRunOutbox?
  createdAt         DateTime           @default(now())
  status            WorkflowStatus?    @default(Pending)
  finishedAt        DateTime?
  errorMetadata     Json?
}

model WorkflowRunOutbox {
  id            String      @id @default(uuid())
  workflowRunId String      @unique
  workflowRun   WorkflowRun @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
}

model Credentials {
  id        String    @id @default(uuid())
  title     String
  platform  Platforms
  keys      Json      @default("{}")
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Platforms {
  email
  telegram
  gemini
}

enum WorkflowStatus {
  Error
  Complete
  Pending
}
